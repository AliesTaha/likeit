{"ast":null,"code":"function getOS() {\n  const {\n    userAgent\n  } = window.navigator;\n  const macosPlatforms = /(Macintosh)|(MacIntel)|(MacPPC)|(Mac68K)/i;\n  const windowsPlatforms = /(Win32)|(Win64)|(Windows)|(WinCE)/i;\n  const iosPlatforms = /(iPhone)|(iPad)|(iPod)/i;\n\n  if (macosPlatforms.test(userAgent)) {\n    return \"macos\";\n  }\n\n  if (iosPlatforms.test(userAgent)) {\n    return \"ios\";\n  }\n\n  if (windowsPlatforms.test(userAgent)) {\n    return \"windows\";\n  }\n\n  if (/Android/i.test(userAgent)) {\n    return \"android\";\n  }\n\n  if (/Linux/i.test(userAgent)) {\n    return \"linux\";\n  }\n\n  return \"undetermined\";\n}\n\nfunction useOs() {\n  if (typeof window !== \"undefined\") {\n    return getOS();\n  }\n\n  return \"undetermined\";\n}\n\nexport { useOs };","map":{"version":3,"mappings":"AAAA,SAASA,KAAT,GAAiB;AACf,QAAM;AAAEC;AAAF,MAAgBC,MAAM,CAACC,SAA7B;AACA,QAAMC,cAAc,GAAG,2CAAvB;AACA,QAAMC,gBAAgB,GAAG,oCAAzB;AACA,QAAMC,YAAY,GAAG,yBAArB;;AACA,MAAIF,cAAc,CAACG,IAAf,CAAoBN,SAApB,CAAJ,EAAoC;AAClC,WAAO,OAAP;AACD;;AACD,MAAIK,YAAY,CAACC,IAAb,CAAkBN,SAAlB,CAAJ,EAAkC;AAChC,WAAO,KAAP;AACD;;AACD,MAAII,gBAAgB,CAACE,IAAjB,CAAsBN,SAAtB,CAAJ,EAAsC;AACpC,WAAO,SAAP;AACD;;AACD,MAAI,WAAWM,IAAX,CAAgBN,SAAhB,CAAJ,EAAgC;AAC9B,WAAO,SAAP;AACD;;AACD,MAAI,SAASM,IAAT,CAAcN,SAAd,CAAJ,EAA8B;AAC5B,WAAO,OAAP;AACD;;AACD,SAAO,cAAP;AACD;;AACM,SAASO,KAAT,GAAiB;AACtB,MAAI,OAAON,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAOF,KAAK,EAAZ;AACD;;AACD,SAAO,cAAP;AACF","names":["getOS","userAgent","window","navigator","macosPlatforms","windowsPlatforms","iosPlatforms","test","useOs"],"sources":["/Users/alies/Desktop/University/Projects/likeit/node_modules/@mantine/hooks/src/use-os/use-os.ts"],"sourcesContent":["export type OS = 'undetermined' | 'macos' | 'ios' | 'windows' | 'android' | 'linux';\n\nfunction getOS(): OS {\n  const { userAgent } = window.navigator;\n  const macosPlatforms = /(Macintosh)|(MacIntel)|(MacPPC)|(Mac68K)/i;\n  const windowsPlatforms = /(Win32)|(Win64)|(Windows)|(WinCE)/i;\n  const iosPlatforms = /(iPhone)|(iPad)|(iPod)/i;\n\n  if (macosPlatforms.test(userAgent)) {\n    return 'macos';\n  }\n  if (iosPlatforms.test(userAgent)) {\n    return 'ios';\n  }\n  if (windowsPlatforms.test(userAgent)) {\n    return 'windows';\n  }\n  if (/Android/i.test(userAgent)) {\n    return 'android';\n  }\n  if (/Linux/i.test(userAgent)) {\n    return 'linux';\n  }\n\n  return 'undetermined';\n}\n\nexport function useOs(): OS {\n  if (typeof window !== 'undefined') {\n    return getOS();\n  }\n\n  return 'undetermined';\n}\n"]},"metadata":{},"sourceType":"module"}