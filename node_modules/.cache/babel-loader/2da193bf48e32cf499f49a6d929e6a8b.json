{"ast":null,"code":"import React from 'react';\nimport { Global } from '@emotion/react';\n\nfunction assignSizeVariables(variables, sizes, name) {\n  Object.keys(sizes).forEach(size => {\n    variables[`--mantine-${name}-${size}`] = typeof sizes[size] === \"number\" ? `${sizes[size]}px` : sizes[size];\n  });\n}\n\nfunction MantineCssVariables(_ref) {\n  let {\n    theme\n  } = _ref;\n  const variables = {\n    \"--mantine-color-white\": theme.white,\n    \"--mantine-color-black\": theme.black,\n    \"--mantine-transition-timing-function\": theme.transitionTimingFunction,\n    \"--mantine-line-height\": `${theme.lineHeight}`,\n    \"--mantine-font-family\": theme.fontFamily,\n    \"--mantine-font-family-monospace\": theme.fontFamilyMonospace,\n    \"--mantine-font-family-headings\": theme.headings.fontFamily,\n    \"--mantine-heading-font-weight\": `${theme.headings.fontWeight}`\n  };\n  assignSizeVariables(variables, theme.shadows, \"shadow\");\n  assignSizeVariables(variables, theme.fontSizes, \"font-size\");\n  assignSizeVariables(variables, theme.radius, \"radius\");\n  assignSizeVariables(variables, theme.spacing, \"spacing\");\n  Object.keys(theme.colors).forEach(color => {\n    theme.colors[color].forEach((shade, index) => {\n      variables[`--mantine-color-${color}-${index}`] = shade;\n    });\n  });\n  const headings = theme.headings.sizes;\n  Object.keys(headings).forEach(heading => {\n    variables[`--mantine-${heading}-font-size`] = `${headings[heading].fontSize}px`;\n    variables[`--mantine-${heading}-line-height`] = `${headings[heading].lineHeight}`;\n  });\n  return /* @__PURE__ */React.createElement(Global, {\n    styles: {\n      \":root\": variables\n    }\n  });\n}\n\nexport { MantineCssVariables };","map":{"version":3,"mappings":";;;AAEA,SAASA,mBAAT,CAA6BC,SAA7B,EAAwCC,KAAxC,EAA+CC,IAA/C,EAAqD;AACnDC,QAAM,CAACC,IAAP,CAAYH,KAAZ,EAAmBI,OAAnB,CAA4BC,IAAD,IAAU;AACnCN,aAAS,CAAE,aAAYE,IAAK,IAAGI,IAAK,EAA3B,CAAT,GAAyC,OAAOL,KAAK,CAACK,IAAD,CAAZ,KAAuB,QAAvB,GAAmC,GAAEL,KAAK,CAACK,IAAD,CAAO,IAAjD,GAAuDL,KAAK,CAACK,IAAD,CAArG;AACD,GAFD;AAGD;;AACM,SAASC,mBAAT,OAAwC;AAAA,MAAX;AAAEC;AAAF,GAAW;AAC7C,QAAMR,SAAS,GAAG;AAChB,6BAAyBQ,KAAK,CAACC,KADf;AAEhB,6BAAyBD,KAAK,CAACE,KAFf;AAGhB,4CAAwCF,KAAK,CAACG,wBAH9B;AAIhB,6BAA0B,GAAEH,KAAK,CAACI,UAAW,EAJ7B;AAKhB,6BAAyBJ,KAAK,CAACK,UALf;AAMhB,uCAAmCL,KAAK,CAACM,mBANzB;AAOhB,sCAAkCN,KAAK,CAACO,QAAN,CAAeF,UAPjC;AAQhB,qCAAkC,GAAEL,KAAK,CAACO,QAAN,CAAeC,UAAW;AAR9C,GAAlB;AAUAjB,qBAAmB,CAACC,SAAD,EAAYQ,KAAK,CAACS,OAAlB,EAA2B,QAA3B,CAAnB;AACAlB,qBAAmB,CAACC,SAAD,EAAYQ,KAAK,CAACU,SAAlB,EAA6B,WAA7B,CAAnB;AACAnB,qBAAmB,CAACC,SAAD,EAAYQ,KAAK,CAACW,MAAlB,EAA0B,QAA1B,CAAnB;AACApB,qBAAmB,CAACC,SAAD,EAAYQ,KAAK,CAACY,OAAlB,EAA2B,SAA3B,CAAnB;AACAjB,QAAM,CAACC,IAAP,CAAYI,KAAK,CAACa,MAAlB,EAA0BhB,OAA1B,CAAmCiB,KAAD,IAAW;AAC3Cd,SAAK,CAACa,MAAN,CAAaC,KAAb,EAAoBjB,OAApB,CAA4B,CAACkB,KAAD,EAAQC,KAAR,KAAkB;AAC5CxB,eAAS,CAAE,mBAAkBsB,KAAM,IAAGE,KAAM,EAAnC,CAAT,GAAiDD,KAAjD;AACD,KAFD;AAGD,GAJD;AAKA,QAAMR,QAAQ,GAAGP,KAAK,CAACO,QAAN,CAAed,KAAhC;AACAE,QAAM,CAACC,IAAP,CAAYW,QAAZ,EAAsBV,OAAtB,CAA+BoB,OAAD,IAAa;AACzCzB,aAAS,CAAE,aAAYyB,OAAQ,YAAtB,CAAT,GAA+C,GAAEV,QAAQ,CAACU,OAAD,CAAR,CAAkBC,QAAS,IAA5E;AACA1B,aAAS,CAAE,aAAYyB,OAAQ,cAAtB,CAAT,GAAiD,GAAEV,QAAQ,CAACU,OAAD,CAAR,CAAkBb,UAAW,EAAhF;AACD,GAHD;AAIA,wBAAuBe,KAAK,CAACC,aAAN,CAAoBC,MAApB,EAA4B;AACjDC,UAAM,EAAE;AACN,eAAS9B;AADH;AADyC,GAA5B,CAAvB;AAKF","names":["assignSizeVariables","variables","sizes","name","Object","keys","forEach","size","MantineCssVariables","theme","white","black","transitionTimingFunction","lineHeight","fontFamily","fontFamilyMonospace","headings","fontWeight","shadows","fontSizes","radius","spacing","colors","color","shade","index","heading","fontSize","React","createElement","Global","styles"],"sources":["/Users/alies/Desktop/University/Projects/likeit/node_modules/@mantine/styles/src/theme/MantineCssVariables.tsx"],"sourcesContent":["import React from 'react';\nimport { Global } from '@emotion/react';\nimport type { MantineTheme, MantineSize } from './types';\n\nfunction assignSizeVariables(\n  variables: Record<string, string>,\n  sizes: Record<MantineSize, number | string>,\n  name: string\n) {\n  Object.keys(sizes).forEach((size) => {\n    // eslint-disable-next-line no-param-reassign\n    variables[`--mantine-${name}-${size}`] =\n      typeof sizes[size] === 'number' ? `${sizes[size]}px` : sizes[size];\n  });\n}\n\nexport function MantineCssVariables({ theme }: { theme: MantineTheme }) {\n  const variables: Record<string, string> = {\n    '--mantine-color-white': theme.white,\n    '--mantine-color-black': theme.black,\n    '--mantine-transition-timing-function': theme.transitionTimingFunction,\n    '--mantine-line-height': `${theme.lineHeight}`,\n    '--mantine-font-family': theme.fontFamily,\n    '--mantine-font-family-monospace': theme.fontFamilyMonospace,\n    '--mantine-font-family-headings': theme.headings.fontFamily,\n    '--mantine-heading-font-weight': `${theme.headings.fontWeight}`,\n  };\n\n  assignSizeVariables(variables, theme.shadows, 'shadow');\n  assignSizeVariables(variables, theme.fontSizes, 'font-size');\n  assignSizeVariables(variables, theme.radius, 'radius');\n  assignSizeVariables(variables, theme.spacing, 'spacing');\n\n  Object.keys(theme.colors).forEach((color) => {\n    theme.colors[color].forEach((shade, index) => {\n      variables[`--mantine-color-${color}-${index}`] = shade;\n    });\n  });\n\n  const headings = theme.headings.sizes;\n\n  Object.keys(headings).forEach((heading) => {\n    variables[`--mantine-${heading}-font-size`] = `${headings[heading].fontSize}px`;\n    variables[`--mantine-${heading}-line-height`] = `${headings[heading].lineHeight}`;\n  });\n\n  return (\n    <Global\n      styles={{\n        ':root': variables,\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}